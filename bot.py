import logging
import json
from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    MessageHandler,
    filters,
    ConversationHandler,
    ContextTypes
)
from config import Config
from bitrix_api import BitrixAPI
from database import Database
from flask import Flask
from threading import Thread, Lock
import os
import asyncio
import sys
from datetime import datetime
import tempfile
import signal

# –°–æ–∑–¥–∞–µ–º Flask –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
app = Flask(__name__)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
log_dir = os.path.join(tempfile.gettempdir(), 'bot_logs')
os.makedirs(log_dir, exist_ok=True)

logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO,
    handlers=[
        logging.StreamHandler(sys.stdout),
        logging.FileHandler(os.path.join(log_dir, f'bot_{datetime.now().strftime("%Y%m%d")}.log'), encoding='utf-8')
    ]
)

logger = logging.getLogger(__name__)

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –∫–æ–Ω—Ç—Ä–æ–ª—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –±–æ—Ç–∞
bot_lock = Lock()
bot_instance = None
stop_event = asyncio.Event()

db = Database()
STATES = Config.STATES

@app.route('/')
def home():
    return "Bot is running!"

def run_flask():
    try:
        port = int(os.environ.get('PORT', 8080))
        logger.info(f"–ó–∞–ø—É—Å–∫ Flask –Ω–∞ –ø–æ—Ä—Ç—É {port}")
        app.run(host='0.0.0.0', port=port)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ Flask: {e}", exc_info=True)

def main_menu():
    return ReplyKeyboardMarkup([
        ['üö´ –û—Ç–∫–∞–∑', '‚ö†Ô∏è –ü—Ä–µ—Ç–µ–Ω–∑–∏—è'],
        ['‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è', '‚ùå –û—Ç–º–µ–Ω–∞']
    ], resize_keyboard=True)


def cancel_button():
    return ReplyKeyboardMarkup([['‚ùå –û—Ç–º–µ–Ω–∞']], resize_keyboard=True)


def add_more_button():
    return ReplyKeyboardMarkup([
        ['‚ûï –î–æ–±–∞–≤–∏—Ç—å –∞—Ä—Ç–∏–∫—É–ª', '‚û° –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å'],
        ['‚ùå –û—Ç–º–µ–Ω–∞']
    ], resize_keyboard=True)


def claim_type_keyboard():
    return ReplyKeyboardMarkup([
        ['–ù–µ–¥–æ–≤–æ–∑', '–ë—Ä–∞–∫'],
        ['–ü–µ—Ä–µ—Å–æ—Ä—Ç', '‚ùå –û—Ç–º–µ–Ω–∞']
    ], resize_keyboard=True)


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–î–æ–±—Ä—ã–π –¥–µ–Ω—å! –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –æ–±—Ä–∞—â–µ–Ω–∏—è:",
        reply_markup=main_menu()
    )
    return STATES['START']


async def handle_refusal(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data.clear()
    await update.message.reply_text("üìã –í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –∫–ª–∏–µ–Ω—Ç–∞:", reply_markup=cancel_button())
    return STATES['CLIENT_CODE']


async def handle_claim(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data.clear()
    await update.message.reply_text("üìã –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø—Ä–µ—Ç–µ–Ω–∑–∏–∏:", reply_markup=claim_type_keyboard())
    return STATES['CLAIM_TYPE']


async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data.clear()
    await update.message.reply_text(
        "–î–æ–±—Ä—ã–π –¥–µ–Ω—å! –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –æ–±—Ä–∞—â–µ–Ω–∏—è:",
        reply_markup=main_menu()
    )
    return ConversationHandler.END


async def check_cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.message.text == '‚ùå –û—Ç–º–µ–Ω–∞':
        return await cancel(update, context)
    return None


async def process_client_code(update: Update, context: ContextTypes.DEFAULT_TYPE):
    cancel_result = await check_cancel(update, context)
    if cancel_result is not None:
        return cancel_result

    user = update.message.from_user
    code = update.message.text

    if not code.isdigit():
        await update.message.reply_text("‚ùå –ö–æ–¥ –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã!")
        return STATES['CLIENT_CODE']

    context.user_data['client_code'] = code
    await update.message.reply_text("üìç –í–≤–µ–¥–∏—Ç–µ –º–∞—Ä—à—Ä—É—Ç:")
    return STATES['ROUTE']


async def process_route(update: Update, context: ContextTypes.DEFAULT_TYPE):
    cancel_result = await check_cancel(update, context)
    if cancel_result is not None:
        return cancel_result

    context.user_data['route'] = update.message.text
    await update.message.reply_text("üì¶ –í–≤–µ–¥–∏—Ç–µ –∞—Ä—Ç–∏–∫—É–ª —Ç–æ–≤–∞—Ä–∞:")
    return STATES['ARTICLES']


async def process_articles(update: Update, context: ContextTypes.DEFAULT_TYPE):
    cancel_result = await check_cancel(update, context)
    if cancel_result is not None:
        return cancel_result

    context.user_data['current_article'] = update.message.text
    await update.message.reply_text("üî¢ –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ:")
    return STATES['QUANTITY']


async def process_quantity(update: Update, context: ContextTypes.DEFAULT_TYPE):
    cancel_result = await check_cancel(update, context)
    if cancel_result is not None:
        return cancel_result

    quantity = update.message.text

    if not quantity.isdigit():
        await update.message.reply_text("‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ!")
        return STATES['QUANTITY']

    article = context.user_data.get('current_article')
    if not article:
        await update.message.reply_text("‚ö†Ô∏è –û—à–∏–±–∫–∞: –∞—Ä—Ç–∏–∫—É–ª –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return STATES['ARTICLES']

    if 'articles' not in context.user_data:
        context.user_data['articles'] = []

    context.user_data['articles'].append({
        'article': article,
        'quantity': quantity
    })

    del context.user_data['current_article']

    await update.message.reply_text(
        "‚úÖ –¢–æ–≤–∞—Ä –¥–æ–±–∞–≤–ª–µ–Ω!\n–î–æ–±–∞–≤–∏—Ç—å –µ—â—ë –∞—Ä—Ç–∏–∫—É–ª?",
        reply_markup=add_more_button()
    )
    return STATES['ARTICLES']


async def process_articles_or_continue(update: Update, context: ContextTypes.DEFAULT_TYPE):
    cancel_result = await check_cancel(update, context)
    if cancel_result is not None:
        return cancel_result

    choice = update.message.text

    if choice == '‚ûï –î–æ–±–∞–≤–∏—Ç—å –∞—Ä—Ç–∏–∫—É–ª':
        await update.message.reply_text("üì¶ –í–≤–µ–¥–∏—Ç–µ –∞—Ä—Ç–∏–∫—É–ª —Ç–æ–≤–∞—Ä–∞:")
        return STATES['ARTICLES']
    elif choice == '‚û° –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å':
        await update.message.reply_text("üìÑ –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –¥–æ–∫—É–º–µ–Ω—Ç–∞/–£–ü–î:")
        return STATES['DOCUMENT_NUMBER']
    else:
        context.user_data['current_article'] = choice
        await update.message.reply_text("üî¢ –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ:")
        return STATES['QUANTITY']


async def process_document(update: Update, context: ContextTypes.DEFAULT_TYPE):
    cancel_result = await check_cancel(update, context)
    if cancel_result is not None:
        return cancel_result

    context.user_data['document_number'] = update.message.text
    await update.message.reply_text("üìù –í–≤–µ–¥–∏—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:")
    return STATES['COMMENT']


async def process_comment(update: Update, context: ContextTypes.DEFAULT_TYPE):
    cancel_result = await check_cancel(update, context)
    if cancel_result is not None:
        return cancel_result

    user_data = context.user_data
    user_data['comment'] = update.message.text

    task_type = 'claim' if 'claim_type' in user_data else 'refusal'
    task_title = Config.TASK_TITLES[task_type]
    if task_type == 'claim' and user_data.get('claim_type') == '–ù–µ–¥–æ–≤–æ–∑':
        task_title = f"–ü—Ä–µ—Ç–µ–Ω–∑–∏—è {user_data['claim_type']}"

    result = BitrixAPI.create_task(task_type, {
        'client_code': user_data['client_code'],
        'route': user_data['route'],
        'articles': user_data.get('articles', []),
        'document_number': user_data.get('document_number', ''),
        'comment': user_data['comment'],
        'claim_type': user_data.get('claim_type', ''),
        'title': task_title
    })

    if result.get('success'):
        await update.message.reply_text(
            f"‚úÖ –ó–∞–¥–∞—á–∞ —Å–æ–∑–¥–∞–Ω–∞! ID: {result['task_id']}",
            reply_markup=main_menu()
        )
    else:
        await update.message.reply_text(
            f"‚ùå –û—à–∏–±–∫–∞: {result.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}",
            reply_markup=main_menu()
        )

    context.user_data.clear()
    return ConversationHandler.END


async def process_claim_type(update: Update, context: ContextTypes.DEFAULT_TYPE):
    claim_type = update.message.text
    if claim_type not in ['–ù–µ–¥–æ–≤–æ–∑', '–ë—Ä–∞–∫', '–ü–µ—Ä–µ—Å–æ—Ä—Ç']:
        await update.message.reply_text("‚ùå –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø—Ä–µ—Ç–µ–Ω–∑–∏–∏ –∏–∑ —Å–ø–∏—Å–∫–∞!", reply_markup=claim_type_keyboard())
        return STATES['CLAIM_TYPE']
    
    context.user_data['claim_type'] = claim_type
    await update.message.reply_text("üìã –í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –∫–ª–∏–µ–Ω—Ç–∞:", reply_markup=cancel_button())
    return STATES['CLIENT_CODE']


async def handle_info(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data.clear()
    await update.message.reply_text("üìã –í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –∫–ª–∏–µ–Ω—Ç–∞:", reply_markup=cancel_button())
    return STATES['INFO_CLIENT_CODE']


async def process_info_client_code(update: Update, context: ContextTypes.DEFAULT_TYPE):
    cancel_result = await check_cancel(update, context)
    if cancel_result is not None:
        return cancel_result

    code = update.message.text
    if not code.isdigit():
        await update.message.reply_text("‚ùå –ö–æ–¥ –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã!")
        return STATES['INFO_CLIENT_CODE']

    context.user_data['client_code'] = code
    await update.message.reply_text("üìç –í–≤–µ–¥–∏—Ç–µ –º–∞—Ä—à—Ä—É—Ç:")
    return STATES['INFO_ROUTE']


async def process_info_route(update: Update, context: ContextTypes.DEFAULT_TYPE):
    cancel_result = await check_cancel(update, context)
    if cancel_result is not None:
        return cancel_result

    context.user_data['route'] = update.message.text
    await update.message.reply_text("üìù –í–≤–µ–¥–∏—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:")
    return STATES['INFO_COMMENT']


async def process_info_comment(update: Update, context: ContextTypes.DEFAULT_TYPE):
    cancel_result = await check_cancel(update, context)
    if cancel_result is not None:
        return cancel_result

    user_data = context.user_data
    user_data['comment'] = update.message.text

    result = BitrixAPI.create_task('info', {
        'client_code': user_data['client_code'],
        'route': user_data['route'],
        'comment': user_data['comment'],
        'title': '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ—Ç –≤–æ–¥–∏—Ç–µ–ª—è'
    })

    if result.get('success'):
        await update.message.reply_text(
            f"‚úÖ –ó–∞–¥–∞—á–∞ —Å–æ–∑–¥–∞–Ω–∞! ID: {result['task_id']}",
            reply_markup=main_menu()
        )
    else:
        await update.message.reply_text(
            f"‚ùå –û—à–∏–±–∫–∞: {result.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}",
            reply_markup=main_menu()
        )

    context.user_data.clear()
    return ConversationHandler.END


async def main():
    global bot_instance, stop_event
    
    while not stop_event.is_set():
        try:
            with bot_lock:
                if bot_instance is not None:
                    logger.info("–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞...")
                    try:
                        # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Å–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
                        await bot_instance.bot.delete_webhook(drop_pending_updates=True)
                        await asyncio.sleep(1)
                        
                        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –±–æ—Ç–∞
                        await bot_instance.stop()
                        await bot_instance.shutdown()
                        
                        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞
                        await bot_instance.bot.get_updates(offset=-1, limit=1)
                        await asyncio.sleep(2)
                    except Exception as e:
                        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞: {e}", exc_info=True)
                    finally:
                        bot_instance = None

                logger.info("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –Ω–æ–≤–æ–≥–æ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ –±–æ—Ç–∞...")
                application = ApplicationBuilder().token(Config.BOT_TOKEN).build()

                # –û—á–∏—â–∞–µ–º –≤—Å–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º
                try:
                    await application.bot.delete_webhook(drop_pending_updates=True)
                    await asyncio.sleep(1)
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π: {e}", exc_info=True)

                # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
                refusal_conv = ConversationHandler(
                    entry_points=[MessageHandler(filters.Regex(r'^üö´ –û—Ç–∫–∞–∑$'), handle_refusal)],
                    states={
                        STATES['CLIENT_CODE']: [MessageHandler(filters.TEXT & ~filters.COMMAND, process_client_code)],
                        STATES['ROUTE']: [MessageHandler(filters.TEXT & ~filters.COMMAND, process_route)],
                        STATES['ARTICLES']: [
                            MessageHandler(filters.Regex(r'^(‚ûï –î–æ–±–∞–≤–∏—Ç—å –∞—Ä—Ç–∏–∫—É–ª|‚û° –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å)$'), process_articles_or_continue),
                            MessageHandler(filters.TEXT & ~filters.COMMAND, process_articles)
                        ],
                        STATES['QUANTITY']: [MessageHandler(filters.TEXT & ~filters.COMMAND, process_quantity)],
                        STATES['DOCUMENT_NUMBER']: [MessageHandler(filters.TEXT & ~filters.COMMAND, process_document)],
                        STATES['COMMENT']: [MessageHandler(filters.TEXT & ~filters.COMMAND, process_comment)]
                    },
                    fallbacks=[CommandHandler('cancel', cancel)],
                    name='refusal_conversation',
                    persistent=False
                )

                claim_conv = ConversationHandler(
                    entry_points=[MessageHandler(filters.Regex(r'^‚ö†Ô∏è –ü—Ä–µ—Ç–µ–Ω–∑–∏—è$'), handle_claim)],
                    states={
                        STATES['CLAIM_TYPE']: [MessageHandler(filters.TEXT & ~filters.COMMAND, process_claim_type)],
                        STATES['CLIENT_CODE']: [MessageHandler(filters.TEXT & ~filters.COMMAND, process_client_code)],
                        STATES['ROUTE']: [MessageHandler(filters.TEXT & ~filters.COMMAND, process_route)],
                        STATES['ARTICLES']: [
                            MessageHandler(filters.Regex(r'^(‚ûï –î–æ–±–∞–≤–∏—Ç—å –∞—Ä—Ç–∏–∫—É–ª|‚û° –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å)$'), process_articles_or_continue),
                            MessageHandler(filters.TEXT & ~filters.COMMAND, process_articles)
                        ],
                        STATES['QUANTITY']: [MessageHandler(filters.TEXT & ~filters.COMMAND, process_quantity)],
                        STATES['DOCUMENT_NUMBER']: [MessageHandler(filters.TEXT & ~filters.COMMAND, process_document)],
                        STATES['COMMENT']: [MessageHandler(filters.TEXT & ~filters.COMMAND, process_comment)]
                    },
                    fallbacks=[CommandHandler('cancel', cancel)],
                    name='claim_conversation',
                    persistent=False
                )

                info_conv = ConversationHandler(
                    entry_points=[MessageHandler(filters.Regex(r'^‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è$'), handle_info)],
                    states={
                        STATES['INFO_CLIENT_CODE']: [MessageHandler(filters.TEXT & ~filters.COMMAND, process_info_client_code)],
                        STATES['INFO_ROUTE']: [MessageHandler(filters.TEXT & ~filters.COMMAND, process_info_route)],
                        STATES['INFO_COMMENT']: [MessageHandler(filters.TEXT & ~filters.COMMAND, process_info_comment)]
                    },
                    fallbacks=[CommandHandler('cancel', cancel)],
                    name='info_conversation',
                    persistent=False
                )

                application.add_handler(refusal_conv)
                application.add_handler(claim_conv)
                application.add_handler(info_conv)
                application.add_handler(CommandHandler('start', start))
                application.add_error_handler(error_handler)

                bot_instance = application
                logger.info("–ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")

            # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞ —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
            await application.initialize()
            await application.start()
            await application.updater.start_polling(
                drop_pending_updates=True,
                allowed_updates=Update.ALL_TYPES
            )
            
            # –ñ–¥–µ–º —Å–∏–≥–Ω–∞–ª–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
            while not stop_event.is_set():
                await asyncio.sleep(1)

        except Exception as e:
            logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ —Ä–∞–±–æ—Ç–µ –±–æ—Ç–∞: {e}", exc_info=True)
            logger.info("–ü–æ–ø—ã—Ç–∫–∞ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥...")
            await asyncio.sleep(5)

def handle_signal(signum, frame):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–∏–≥–Ω–∞–ª–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è"""
    logger.info(f"–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è {signum}")
    stop_event.set()

async def error_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫ –±–æ—Ç–∞"""
    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è {update}: {context.error}", exc_info=True)
    try:
        if update and update.effective_message:
            await update.effective_message.reply_text(
                "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ: {e}", exc_info=True)

if __name__ == '__main__':
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–∏–≥–Ω–∞–ª–æ–≤
    signal.signal(signal.SIGTERM, handle_signal)
    signal.signal(signal.SIGINT, handle_signal)
    
    try:
        logger.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
        asyncio.run(main())
    except KeyboardInterrupt:
        logger.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {e}", exc_info=True)
        sys.exit(1)